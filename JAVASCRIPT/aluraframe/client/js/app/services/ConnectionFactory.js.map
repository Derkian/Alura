{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;;AAEjC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;;AAEA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAa;AAAA;;AAET,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AALL;AAAA;AAAA,4CAO0B;;AAElB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;;AAE/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAHD;;AAKAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,4BAAG,CAACf,UAAJ,EAAe;;AAEXA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;;AAEAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;;AAEAA,uCAAWC,KAAX,GAAmB,YAAY;AAC3B,sCAAM,IAAIC,KAAJ,CAAU,kEAAV,CAAN;AACH,6BAFD;AAGH;;AAEDE,gCAAQJ,UAAR;AACH,qBAdD;;AAgBAM,gCAAYW,OAAZ,GAAsB,aAAK;;AAEvBZ,+BAAOO,EAAEC,MAAF,CAASC,MAAT,CAAgBI,IAAvB;AACH,qBAHD;AAIH,iBA7BM,CAAP;AA8BH;AAvCL;AAAA;AAAA,0CAyCyBlB,UAzCzB,EAyCoC;;AAE5BH,uBAAOsB,OAAP,CAAe,iBAAS;;AAEpB,wBAAGnB,WAAWoB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAA+C;AAC3CtB,mCAAWuB,iBAAX,CAA6BD,KAA7B;AACH;;AAEDtB,+BAAWwB,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAgB,IAAlB,EAApC;AACH,iBAPD;AAQH;AAnDL;AAAA;AAAA,6CAqD2B;AACnBxB;AACAA,wBAAQ,IAAR;AACAD,6BAAa,IAAb;AACH;AAzDL;;AAAA;AAAA;AA2DH,CArEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\r\n    \r\n    const stores = ['negociacoes']\r\n    const version = 1;\r\n    const dbName = 'aluraframe';\r\n\r\n    var connection = null;\r\n\r\n    var close = null;\r\n    \r\n    return class ConnectionFactory{\r\n    \r\n        constructor(){\r\n    \r\n            throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n        }\r\n    \r\n        static getConnection(){\r\n    \r\n            return new Promise((resolve, reject) => {\r\n    \r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n    \r\n                openRequest.onupgradeneeded = e => {\r\n    \r\n                    ConnectionFactory._createStores(e.target.result);                \r\n                };\r\n                \r\n                openRequest.onsuccess = e => {\r\n                  \r\n                    if(!connection){\r\n\r\n                        connection = e.target.result;\r\n\r\n                        close = connection.close.bind(connection);\r\n\r\n                        connection.close = function () {\r\n                            throw new Error('Não é possível fechar a conexão fora da classe ConnectionFactory')    \r\n                        };\r\n                    } \r\n\r\n                    resolve(connection);\r\n                };\r\n                \r\n                openRequest.onerror = e => {\r\n                    \r\n                    reject(e.target.result.name);\r\n                };\r\n            });\r\n        }\r\n        \r\n        static _createStores(connection){\r\n            \r\n            stores.forEach(store => {\r\n        \r\n                if(connection.objectStoreNames.contains(store)){\r\n                    connection.deleteObjectStore(store);\r\n                }    \r\n        \r\n                connection.createObjectStore(store, { autoIncrement : true});\r\n            });\r\n        }\r\n\r\n        static closConnection(){\r\n            close();\r\n            close = null;\r\n            connection = null;\r\n        }\r\n    }\r\n})()\r\n"]}